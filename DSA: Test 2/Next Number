Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 






/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/

public class Solution {


	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
          head = reverseLL(head);
        int carry = 1;
        LinkedListNode<Integer> temp=head;
        while(temp!=null){
            int sum = temp.data + carry ;
            temp.data = sum%10;
            carry = sum/10;
            temp=temp.next;
        }
        


         if(carry==1){
             temp=head;
             while(temp.next!=null){
                 temp = temp.next;
             }
             LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(carry) ;
             temp.next = newNode;
         }
        
        return reverseLL(head);


    
   
	}
    
     public static LinkedListNode<Integer> reverseLL(LinkedListNode<Integer> head){
        if(head.next==null)
            return head;

        LinkedListNode<Integer> prev = null,curr = head;
        while(curr!=null) {
        	LinkedListNode<Integer> temp = curr.next;
        	curr.next = prev;
        	prev = curr;
        	curr = temp;
        }
        return prev;

    }


}
